import requests
import logging
from datetime import datetime, timedelta
from dotenv import load_dotenv
import os
import json

# ======== –ó–ê–ì–†–£–ó–ö–ê –û–ö–†–£–ñ–ï–ù–ò–Ø ========
load_dotenv()

# ======== –ù–ê–°–¢–†–û–ô–ö–ò ========
SPENT_LIMIT = 300       # –ª–∏–º–∏—Ç –ø–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–º —Å—Ä–µ–¥—Å—Ç–≤–∞–º
CPA_LIMIT = 200         # –ª–∏–º–∏—Ç –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
VK_HOST = "https://ads.vk.com"
LOG_FILE = "vk_ads.log"
# ============================

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    filename=LOG_FILE,
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
)

# –ê–∫–∫–∞—É–Ω—Ç—ã VK ADS
ACCOUNTS = [
    {
        "name": "User1",
        "token": os.getenv("VK_TOKEN_USER1"),
        "telegram_chat": os.getenv("TELEGRAM_CHAT_USER1"),
    },
    {
        "name": "User2",
        "token": os.getenv("VK_TOKEN_USER2"),
        "telegram_chat": os.getenv("TELEGRAM_CHAT_USER2"),
    },
]

TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")


# ======== –§–£–ù–ö–¶–ò–ò ========

def send_telegram_message(chat_id: str, text: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        requests.post(url, data={"chat_id": chat_id, "text": text})
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")


def get_vk(url, token, params=None):
    """GET-–∑–∞–ø—Ä–æ—Å –∫ VK ADS API"""
    headers = {"Authorization": f"Bearer {token}"}
    r = requests.get(f"{VK_HOST}{url}", headers=headers, params=params)
    if r.status_code != 200:
        raise Exception(f"–û—à–∏–±–∫–∞ VK GET {url}: {r.status_code} {r.text}")
    return r.json()


def post_vk(url, token, data=None):
    """POST-–∑–∞–ø—Ä–æ—Å –∫ VK ADS API"""
    headers = {"Authorization": f"Bearer {token}", "Content-Type": "application/json"}
    r = requests.post(f"{VK_HOST}{url}", headers=headers, json=data)
    if r.status_code not in (200, 204):
        raise Exception(f"–û—à–∏–±–∫–∞ VK POST {url}: {r.status_code} {r.text}")
    return r


def check_ads(account):
    token = account["token"]
    chat_id = account["telegram_chat"]
    user_name = account["name"]

    logging.info(f"===== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞: {user_name} =====")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏
        ad_plans = get_vk("/api/v2/ad_plans.json", token).get("items", [])
        logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(ad_plans)} –∫–∞–º–ø–∞–Ω–∏–π")

        for plan in ad_plans:
            plan_id = plan["id"]
            plan_name = plan["name"]

            logging.info(f"‚ñ∂ –ö–∞–º–ø–∞–Ω–∏—è: {plan_name} (ID {plan_id})")

            # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –∫–∞–º–ø–∞–Ω–∏–∏
            ad_groups = get_vk("/api/v2/ad_groups.json", token, params={"ad_plan_id": plan_id}).get("items", [])
            logging.info(f"  ‚îú‚îÄ –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø: {len(ad_groups)}")

            for group in ad_groups:
                group_id = group["id"]
                group_name = group.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")

                logging.info(f"  ‚îÇ  ‚îú‚îÄ –ì—Ä—É–ø–ø–∞: {group_name} (ID {group_id})")

                # –ü–æ–ª—É—á–∞–µ–º –±–∞–Ω–Ω–µ—Ä—ã
                banners = get_vk("/api/v2/banners.json", token, params={"ad_group_id": group_id}).get("items", [])
                logging.info(f"  ‚îÇ  ‚îÇ  ‚îú‚îÄ –ù–∞–π–¥–µ–Ω–æ –±–∞–Ω–Ω–µ—Ä–æ–≤: {len(banners)}")

                for banner in banners:
                    banner_id = banner["id"]
                    banner_name = banner.get("name", f"Banner {banner_id}")

                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏
                    date_to = datetime.today().strftime("%Y-%m-%d")
                    date_from = (datetime.today() - timedelta(days=1)).strftime("%Y-%m-%d")

                    stats_url = "/api/v2/statistics/banners/summary.json"
                    params = {
                        "id": banner_id,
                        "metrics": "base",
                        "attribution": "conversion",
                        "date_from": date_from,
                        "date_to": date_to,
                    }

                    stat_data = get_vk(stats_url, token, params=params)
                    items = stat_data.get("items", [])

                    if not items:
                        logging.info(f"  ‚îÇ  ‚îÇ  ‚îî‚îÄ {banner_name}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
                        continue

                    metrics = items[0]["total"]["base"]
                    spent = float(metrics.get("spent", 0))
                    cpa = float(metrics.get("vk", {}).get("cpa", 0))

                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –±–∞–Ω–Ω–µ—Ä—É
                    logging.info(
                        f"  ‚îÇ  ‚îÇ  ‚îî‚îÄ {banner_name} (ID {banner_id}): spent={spent}, cpa={cpa}"
                    )

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
                    if spent >= SPENT_LIMIT and cpa >= CPA_LIMIT:
                        try:
                            post_vk(f"/api/v2/banners/{banner_id}.json", token, data={"status": "blocked"})
                            msg = f"[{plan_name}] [{group_name}] [{banner_name}] ‚Äî –æ—Ç–∫–ª—é—á–µ–Ω (spent={spent}, cpa={cpa})"
                            send_telegram_message(chat_id, msg)
                            logging.warning(f"  ‚îÇ  ‚îÇ     üö´ –û—Ç–∫–ª—é—á–µ–Ω –±–∞–Ω–Ω–µ—Ä: {msg}")
                        except Exception as e:
                            logging.error(f"  ‚îÇ  ‚îÇ     ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –±–∞–Ω–Ω–µ—Ä–∞ {banner_id}: {e}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {user_name}: {e}")


# ======== –¢–û–ß–ö–ê –í–•–û–î–ê ========
if __name__ == "__main__":
    logging.info(f"\n\n===== –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ {datetime.now()} =====")
    for acc in ACCOUNTS:
        check_ads(acc)
    logging.info("===== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ =====\n")
