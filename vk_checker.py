from __future__ import annotations

import os
import sys
import time
import json
import math
import logging
import pathlib
import datetime as dt
from dataclasses import dataclass, field
from typing import Any, Dict, List, Optional, Tuple

import requests
from dotenv import load_dotenv

# ==========================
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
# ==========================
BASE_URL = os.environ.get("VK_ADS_BASE_URL", "https://ads.vk.com")  # –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤ .env
STATS_TIMEOUT = 30
WRITE_TIMEOUT = 30
RETRY_COUNT = 3
RETRY_BACKOFF = 1.8
MAX_DISABLES_PER_RUN = 10  # –º–∞–∫—Å–∏–º—É–º –±–∞–Ω–Ω–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—É—Å–∫

DRY_RUN = True  #True –¥–ª—è —Ç–µ—Å—Ç–æ–≤, False –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ

# –ü–µ—Ä–∏–æ–¥ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –º–µ—Ç—Ä–∏–∫ —Ñ–∏–ª—å—Ç—Ä–∞ (spent, cpc, vk.cpa)
N_DAYS_DEFAULT = 2  # –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞

# –ü–æ—Ä–æ–≥ "–Ω–µ —Ç—Ä–æ–≥–∞—Ç—å, –µ—Å–ª–∏ —É–∂–µ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏":
SPENT_ALL_TIME_DONT_TOUCH_RUB = 2000

# –ë–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
@dataclass
class BaseFilter:
    min_spent_for_cpc: float = 80.0
    cpc_bad_value: float = 80.0  # cpc == 0 –∏–ª–∏ >= 80
    min_spent_for_cpa: float = 300.0
    cpa_bad_value: float = 300.0  # vk.cpa == 0 –∏–ª–∏ >= 300

    def violates(self, spent: float, cpc: float, vk_cpa: float) -> Tuple[bool, str]:
        cond1 = (spent >= self.min_spent_for_cpc) and (cpc == 0 or cpc >= self.cpc_bad_value)
        cond2 = (spent >= self.min_spent_for_cpa) and (vk_cpa == 0 or vk_cpa >= self.cpa_bad_value)
        reason = []
        if cond1:
            reason.append(
                f"spent‚â•{self.min_spent_for_cpc} & (cpc==0 or cpc‚â•{self.cpc_bad_value}) => (spent={spent:.2f}, cpc={cpc:.2f})"
            )
        if cond2:
            reason.append(
                f"spent‚â•{self.min_spent_for_cpa} & (vk.cpa==0 or vk.cpa‚â•{self.cpa_bad_value}) => (spent={spent:.2f}, vk.cpa={vk_cpa:.2f})"
            )
        return (cond1 and cond2, "; ".join(reason) if reason else "")

# –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–∞
@dataclass
class AccountConfig:
    name: str
    token_env: str
    chat_id_env: str
    n_days: int = N_DAYS_DEFAULT
    n_all_time: bool = False
    flt: BaseFilter = field(default_factory=BaseFilter)
    # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ 
    allowed_campaigns: List[int] = field(default_factory=list)
    allowed_banners: List[int] = field(default_factory=list)
    # –ò—Å–∫–ª—é—á–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—É—Å—Ç—ã–µ)
    exceptions_campaigns: List[int] = field(default_factory=list)
    exceptions_banners: List[int] = field(default_factory=list)
    # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–Ω–Ω–µ—Ä–∞
    banner_date_create: Optional[str] = None

    @property
    def token(self) -> str:
        t = os.environ.get(self.token_env)
        if not t:
            raise RuntimeError(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –≤ .env: {self.token_env}")
        return t

    @property
    def chat_id(self) -> str:
        c = os.environ.get(self.chat_id_env)
        if not c:
            raise RuntimeError(f"–ù–µ –Ω–∞–π–¥–µ–Ω chat id –≤ .env: {self.chat_id_env}")
        return c


# –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤ (–¥–æ–±–∞–≤—å—Ç–µ/–∏–∑–º–µ–Ω–∏—Ç–µ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏)
ACCOUNTS: List[AccountConfig] = [
    #AccountConfig(
    #    name="MAIN",
    #    token_env="VK_TOKEN_MAIN",
    #    chat_id_env="TG_CHAT_ID_MAIN",
    #    n_days=2,
    #    n_all_time=True,
    #    flt=BaseFilter(),  # –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –ø–æ—Ä–æ–≥–∏ per-account
    #    banner_date_create=None,
    #    allowed_campaigns=[],
    #    allowed_banners=[],
    #    exceptions_campaigns=[],
    #    exceptions_banners=[],
    #),
    AccountConfig(
        name="–û–°–ù–û–í–ù–û–ô",
        token_env="VK_TOKEN_ZEL_1",
        chat_id_env="TG_CHAT_ID_MAIN",
        n_days=2,
        n_all_time=True,
        flt=BaseFilter(min_spent_for_cpc=170, cpc_bad_value=100, min_spent_for_cpa=330, cpa_bad_value=300),
        banner_date_create=None,
        allowed_campaigns=[14739714,14739769,14739806,14740194,14740269,14741230,14741258,14741283,14741312,14741807,14741832,14741866,14741875,14741894,14741928,14741945,14741967,14741995],
        allowed_banners=[],
        exceptions_campaigns=[],
        exceptions_banners=[],
    )
    # AccountConfig(name="CLIENT1", token_env="VK_TOKEN_CLIENT1", chat_id_env="TG_CHAT_ID_CLIENT1", n_days=5,
    #               flt=BaseFilter(min_spent_for_cpc=60, cpc_bad_value=70, min_spent_for_cpa=250, cpa_bad_value=250)),
]

# ==========================
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# ==========================
LOG_DIR = pathlib.Path("logs")
LOG_DIR.mkdir(exist_ok=True)
log_file = LOG_DIR / "vk_checker.log"

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler(log_file, encoding="utf-8"),
    ],
)
logger = logging.getLogger("vk_ads_auto")

# ==========================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ==========================

def load_env() -> None:
    if not load_dotenv():
        logger.warning(".env –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω ‚Äî —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

def short_reason(spent: float, cpc: float, vk_cpa: float, flt: BaseFilter) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Å—Ç—É—é —Ç–µ–∫—Å—Ç–æ–≤—É—é –ø—Ä–∏—á–∏–Ω—É"""
    cond_cpc = (spent >= flt.min_spent_for_cpc) and (cpc == 0 or cpc >= flt.cpc_bad_value)
    cond_cpa = (spent >= flt.min_spent_for_cpa) and (vk_cpa == 0 or vk_cpa >= flt.cpa_bad_value)
    if cond_cpc and cond_cpa:
        return "–î–æ—Ä–æ–≥–∞—è —Ü–µ–Ω–∞ –∫–ª–∏–∫–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"
    elif cond_cpc:
        return "–î–æ—Ä–æ–≥–∞—è —Ü–µ–Ω–∞ –∫–ª–∏–∫–∞"
    elif cond_cpa:
        return "–î–æ—Ä–æ–≥–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
    return "‚Äî"
    

def fmt_date(d: str) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞—Ç—É YYYY-MM-DD ‚Üí DD.MM"""
    try:
        dt_obj = dt.datetime.strptime(d, "%Y-%m-%d")
        return dt_obj.strftime("%d.%m")
    except Exception:
        return d

def req_with_retry(method: str, url: str, headers: Dict[str, str], params: Dict[str, Any] | None = None,
                   json_body: Dict[str, Any] | None = None, timeout: int = 30) -> requests.Response:
    last_exc: Optional[Exception] = None
    for attempt in range(1, RETRY_COUNT + 1):
        try:
            resp = requests.request(method, url, headers=headers, params=params, json=json_body, timeout=timeout)
            
            # üí° –ï—Å–ª–∏ VK API –≤–µ—Ä–Ω—É–ª –ª–∏–º–∏—Ç
            if resp.status_code == 429:
                retry_after = int(resp.headers.get("Retry-After", "3"))
                logger.warning(f"‚ö†Ô∏è VK API rate limit (429). –ü–∞—É–∑–∞ {retry_after}s –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
                time.sleep(retry_after)
                continue
            
            if resp.status_code >= 500:
                raise requests.HTTPError(f"{resp.status_code} {resp.text}")
            return resp
        
        except Exception as e:
            last_exc = e
            sleep_for = RETRY_BACKOFF ** (attempt - 1)
            logger.warning(f"{method} {url} –ø–æ–ø—ã—Ç–∫–∞ {attempt}/{RETRY_COUNT} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {sleep_for:.1f}s")
            time.sleep(sleep_for)
    
    assert last_exc is not None
    raise last_exc


def tg_notify(bot_token: str, chat_id: str, text: str) -> None:
    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "HTML",
        "disable_web_page_preview": True,
    }
    try:
        r = requests.post(url, json=payload, timeout=20)
        if r.status_code != 200:
            logger.error(f"TG notify failed: {r.status_code} {r.text}")
    except Exception as e:
        logger.error(f"TG notify exception: {e}")


# ==========================
# VK ADS API –æ–±—ë—Ä—Ç–∫–∏ (v2)
# ==========================

class VkAdsApi:
    def __init__(self, token: str, base_url: str = BASE_URL):
        self.base_url = base_url.rstrip("/")
        self.token = token
        self.headers = {
            # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ö–µ–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –≤–∞—à–µ–π –∏–Ω—Å—Ç–∞–ª–ª—è—Ü–∏–∏ (Bearer/Token/–∫–∞—Å—Ç–æ–º–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫)
            "Authorization": f"Bearer {self.token}",
            "Accept": "application/json",
        }

    # --- –°–ø–∏—Å–æ–∫ –±–∞–Ω–Ω–µ—Ä–æ–≤ (–æ–±—ä—è–≤–ª–µ–Ω–∏–π) ---
    def list_active_banners(self, limit: int = 1000) -> List[Dict[str, Any]]:
        url = f"{self.base_url}/api/v2/banners.json"
        offset = 0
        items: List[Dict[str, Any]] = []
        while True:
            params = {
                "limit": min(limit, 200),
                "offset": offset,
                "_status": "active",
                # –ú–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –≥—Ä—É–ø–ø–∞–º–∏: "_ad_group_status": "active",
            }
            resp = req_with_retry("GET", url, headers=self.headers, params=params, timeout=STATS_TIMEOUT)
            data = resp.json()
            batch = data.get("items", [])
            items.extend(batch)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–Ω–Ω–µ—Ä–æ–≤: +{len(batch)} (–≤—Å–µ–≥–æ {len(items)})")
            if len(batch) < params["limit"]:
                break
            offset += params["limit"]
        return items

    # --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ summary (–∑–∞ –≤—Å—ë –≤—Ä–µ–º—è) ---
    def stats_summary_banners(self, banner_ids: List[int]) -> Dict[int, Dict[str, Any]]:
        if not banner_ids:
            return {}
        url = f"{self.base_url}/api/v2/statistics/banners/summary.json"
        params = {
            "id": ",".join(map(str, banner_ids)),
            "metrics": "base",
        }
        resp = req_with_retry("GET", url, headers=self.headers, params=params, timeout=STATS_TIMEOUT)
        data = resp.json()
        result: Dict[int, Dict[str, Any]] = {}
        for it in data.get("items", []):
            _id = int(it.get("id"))
            total = it.get("total", {}) or {}
            base = total.get("base", {}) or {}
            vk = base.get("vk", {}) or {}
            result[_id] = {
                "spent_all_time": float(base.get("spent", 0) or 0),
                "cpc_all_time": float(base.get("cpc", 0) or 0),
                "vk.cpa_all_time": float(vk.get("cpa", 0) or 0),
            }
        return result

    # --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ (day) —Å total ---
    def stats_period_banners(self, banner_ids: List[int], date_from: str, date_to: str) -> Dict[int, Dict[str, Any]]:
        if not banner_ids:
            return {}
        url = f"{self.base_url}/api/v2/statistics/banners/day.json"
        params = {
            "id": ",".join(map(str, banner_ids)),
            "date_from": date_from,
            "date_to": date_to,
            "metrics": "base",
        }
        resp = req_with_retry("GET", url, headers=self.headers, params=params, timeout=STATS_TIMEOUT)
        data = resp.json()
        result: Dict[int, Dict[str, Any]] = {}
        for it in data.get("items", []):
            _id = int(it.get("id"))
            total = it.get("total", {}) or {}
            base = total.get("base", {}) or {}
            vk = base.get("vk", {}) or {}
            rows = it.get("rows", []) or []
            result[_id] = {
                "spent": float(base.get("spent", 0) or 0),
                "cpc": float(base.get("cpc", 0) or 0),
                "vk.cpa": float(vk.get("cpa", 0) or 0),
                "rows": rows,
            }
        return result

    def add_banners_from_allowed_campaign(self, campaign_id: int, allowed_banners: List[int]) -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –±–∞–Ω–Ω–µ—Ä–æ–≤ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∞–Ω–Ω–µ—Ä—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏.
        –î–µ–ª–∞–µ—Ç –¥–≤–∞ –∑–∞–ø—Ä–æ—Å–∞:
          1) /api/v2/ad_plans/<id>.json?fields=ad_groups ‚Äî –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –≥—Ä—É–ø–ø—ã
          2) /api/v2/ad_groups/<group_id>.json?fields=banners ‚Äî –ø–æ–ª—É—á–∞–µ—Ç –±–∞–Ω–Ω–µ—Ä—ã –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
        """
        seen = set(allowed_banners)
        try:
            # 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –∫–∞–º–ø–∞–Ω–∏–∏
            time.sleep(0.5)  # ‚è≥ —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å API
            url_plan = f"{self.base_url}/api/v2/ad_plans/{campaign_id}.json"
            resp_plan = req_with_retry(
                "GET",
                url_plan,
                headers=self.headers,
                params={"fields": "ad_groups"},
                timeout=STATS_TIMEOUT,
            )
            data_plan = resp_plan.json()
            ad_groups = data_plan.get("ad_groups", [])
            logger.info(f"–ö–∞–º–ø–∞–Ω–∏—è {campaign_id}: –ø–æ–ª—É—á–µ–Ω–æ –≥—Ä—É–ø–ø {len(ad_groups)} (–¥–ª—è allowed)")
    
            # 2Ô∏è‚É£ –î–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä—ã
            added = 0
            for g in ad_groups:
                gid = g.get("id")
                if not gid:
                    continue
                
                time.sleep(0.4)  # ‚è≥ –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≥—Ä—É–ø–ø (–∞–Ω—Ç–∏-–ª–∏–º–∏—Ç)
                url_group = f"{self.base_url}/api/v2/ad_groups/{gid}.json"
                resp_group = req_with_retry(
                    "GET",
                    url_group,
                    headers=self.headers,
                    params={"fields": "banners"},
                    timeout=STATS_TIMEOUT,
                )
                data_group = resp_group.json()
                banners = data_group.get("banners", [])
                for b in banners:
                    bid = int(b.get("id") or 0)
                    if bid and bid not in seen:
                        allowed_banners.append(bid)
                        seen.add(bid)
                        added += 1
                        # üí° –Ω–µ–±–æ–ª—å—à–∞—è –º–∏–∫—Ä–æ–∑–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ (–µ—Å–ª–∏ –≥—Ä—É–ø–ø –º–Ω–æ–≥–æ)
                        if added % 10 == 0:
                            time.sleep(0.2)
    
            logger.info(f"–ö–∞–º–ø–∞–Ω–∏—è {campaign_id}: –¥–æ–±–∞–≤–ª–µ–Ω–æ –±–∞–Ω–Ω–µ—Ä–æ–≤ –≤ allowed {added}")
    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–∞–Ω–Ω–µ—Ä–æ–≤ –∏–∑ –∫–∞–º–ø–∞–Ω–∏–∏ {campaign_id} –≤ allowed: {e}")


    def add_banners_from_campaign_to_exceptions(self, campaign_id: int, exceptions_banners: List[int]) -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –≤ —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∞–Ω–Ω–µ—Ä—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏.
        –î–µ–ª–∞–µ—Ç –¥–≤–∞ –∑–∞–ø—Ä–æ—Å–∞:
          1) /api/v2/ad_plans/<id>.json?fields=ad_groups ‚Äî –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –≥—Ä—É–ø–ø—ã
          2) /api/v2/ad_groups/<group_id>.json?fields=banners ‚Äî –ø–æ–ª—É—á–∞–µ—Ç –±–∞–Ω–Ω–µ—Ä—ã –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
        """
        seen = set(exceptions_banners)
        try:
            # 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –∫–∞–º–ø–∞–Ω–∏–∏
            url_plan = f"{self.base_url}/api/v2/ad_plans/{campaign_id}.json"
            resp_plan = req_with_retry(
                "GET",
                url_plan,
                headers=self.headers,
                params={"fields": "ad_groups"},
                timeout=STATS_TIMEOUT,
            )
            data_plan = resp_plan.json()
            ad_groups = data_plan.get("ad_groups", [])
            logger.info(f"–ö–∞–º–ø–∞–Ω–∏—è {campaign_id}: –ø–æ–ª—É—á–µ–Ω–æ –≥—Ä—É–ø–ø {len(ad_groups)}")

            # 2Ô∏è‚É£ –î–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä—ã
            added = 0
            for g in ad_groups:
                gid = g.get("id")
                if not gid:
                    continue
                url_group = f"{self.base_url}/api/v2/ad_groups/{gid}.json"
                resp_group = req_with_retry(
                    "GET",
                    url_group,
                    headers=self.headers,
                    params={"fields": "banners"},
                    timeout=STATS_TIMEOUT,
                )
                data_group = resp_group.json()
                banners = data_group.get("banners", [])
                for b in banners:
                    bid = int(b.get("id") or 0)
                    if bid and bid not in seen:
                        exceptions_banners.append(bid)
                        seen.add(bid)
                        added += 1
            logger.info(f"–ö–∞–º–ø–∞–Ω–∏—è {campaign_id}: –¥–æ–±–∞–≤–ª–µ–Ω–æ –±–∞–Ω–Ω–µ—Ä–æ–≤ –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è {added}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–∞–Ω–Ω–µ—Ä–æ–≤ –∏–∑ –∫–∞–º–ø–∞–Ω–∏–∏ {campaign_id} –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {e}")

    def get_banner_created(self, banner_id: int) -> Optional[dt.datetime]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–Ω–Ω–µ—Ä–∞.
        GET /api/v2/banners/<id>.json?fields=created
        –î–æ–±–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä –∏ –ø–∞—É–∑–∞ –¥–ª—è –æ–±—Ö–æ–¥–∞ –ª–∏–º–∏—Ç–æ–≤ API.
        """
        url = f"{self.base_url}/api/v2/banners/{banner_id}.json"
        for attempt in range(1, 4):
            try:
                time.sleep(0.4)  # ‚è≥ –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
                resp = req_with_retry(
                    "GET",
                    url,
                    headers=self.headers,
                    params={"fields": "created"},
                    timeout=STATS_TIMEOUT,
                )
                if resp.status_code == 429:
                    logger.warning(f"‚ö†Ô∏è Rate limit –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ created –±–∞–Ω–Ω–µ—Ä–∞ {banner_id}, –ø–æ–ø—ã—Ç–∫–∞ {attempt}")
                    time.sleep(1.5 * attempt)
                    continue
                
                data = resp.json()
                created_str = data.get("created")
                if created_str:
                    # –ü—Ä–∏–º–µ—Ä: "2025-10-28 14:39:40"
                    return dt.datetime.strptime(created_str, "%Y-%m-%d %H:%M:%S")
                else:
                    logger.debug(f"–ë–∞–Ω–Ω–µ—Ä {banner_id}: –ø–æ–ª–µ 'created' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ")
                    return None
    
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–Ω–Ω–µ—Ä–∞ {banner_id}: {e}")
                time.sleep(1.0 * attempt)
        return None


    def get_banner_name(self, banner_id: int) -> str:
        #–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –±–∞–Ω–Ω–µ—Ä–∞ –ø–æ –µ–≥–æ ID.
        #GET /api/v2/banners/<id>.json?fields=name
        url = f"{self.base_url}/api/v2/banners/{banner_id}.json"
        for attempt in range(1, 4):
            try:
                time.sleep(0.4)
                resp = req_with_retry(
                    "GET",
                    url,
                    headers=self.headers,
                    params={"fields": "name"},
                    timeout=STATS_TIMEOUT,
                )
                if resp.status_code == 429:
                    logger.warning(f"‚ö†Ô∏è Rate limit –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ name –±–∞–Ω–Ω–µ—Ä–∞ {banner_id}, –ø–æ–ø—ã—Ç–∫–∞ {attempt}")
                    time.sleep(1.5 * attempt)
                    continue
                
                data = resp.json()
                name = data.get("name", "")
                return name or ""
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –±–∞–Ω–Ω–µ—Ä–∞ {banner_id}: {e}")
                time.sleep(1.0 * attempt)
        return ""

    
    # --- –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (—Å—Ç–∞—Ç—É—Å blocked) ---
    def disable_banner(self, banner_id: int) -> bool:
        if DRY_RUN:
            logger.warning(f"üß™ [DRY RUN] –ë–∞–Ω–Ω–µ—Ä {banner_id} –ù–ï –æ—Ç–∫–ª—é—á–µ–Ω (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)")
            return True
            
        # –û—Ç–∫–ª—é—á–∞–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –Ω–∞ blocked)
        # POST /api/v2/banners/<banner_id>.json
        
        url = f"{self.base_url}/api/v2/banners/{banner_id}.json"
        try:
            resp = req_with_retry(
                method="POST",
                url=url,
                headers={**self.headers, "Content-Type": "application/json"},
                json_body={"status": "blocked"},
                timeout=WRITE_TIMEOUT,
            )
            if resp.status_code == 204:
                logger.info(f"–ë–∞–Ω–Ω–µ—Ä {banner_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω (HTTP 204)")
                return True
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å –±–∞–Ω–Ω–µ—Ä {banner_id}: {resp.status_code} {resp.text}")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –±–∞–Ω–Ω–µ—Ä–∞ {banner_id}: {e}")
            return False


# ==========================
# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
# ==========================

def daterange_for_last_n_days(n_days: int) -> Tuple[str, str]:
    today = dt.date.today()
    since = today - dt.timedelta(days=n_days)
    return since.strftime("%Y-%m-%d"), today.strftime("%Y-%m-%d")


def process_account(acc: AccountConfig, tg_token: str) -> None:
    logger.info("=" * 80)
    logger.info(f"–ö–ê–ë–ò–ù–ï–¢: {acc.name} | n_days={acc.n_days}")
    api = VkAdsApi(token=acc.token)
    disabled_count = 0
    disabled_ids = []  # —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∫–ª—é—á—ë–Ω–Ω—ã—Ö –±–∞–Ω–Ω–µ—Ä–æ–≤
    notifications = []

    if acc.allowed_campaigns:
        for camp_id in acc.allowed_campaigns:
            api.add_banners_from_allowed_campaign(camp_id, acc.allowed_banners)
        logger.info(f"–ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –±–∞–Ω–Ω–µ—Ä–æ–≤: {len(acc.allowed_banners)}")
        
    # --- –ï—Å–ª–∏ –µ—Å—Ç—å –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏, —Ä–∞—Å—à–∏—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã—Ö –±–∞–Ω–Ω–µ—Ä–æ–≤ ---
    if acc.exceptions_campaigns:
        for camp_id in acc.exceptions_campaigns:
            api.add_banners_from_campaign_to_exceptions(camp_id, acc.exceptions_banners)
        logger.info(f"–ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã—Ö –±–∞–Ω–Ω–µ—Ä–æ–≤: {len(acc.exceptions_banners)}")
        
    # 1) –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    banners = api.list_active_banners()
    if not banners:
        logger.info("–ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    banner_ids = [int(b["id"]) for b in banners if "id" in b]
    logger.info(f"–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(banner_ids)}")

    # 2) –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    sum_map = api.stats_summary_banners(banner_ids)
    
    if acc.n_all_time:
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∂–∏–º n_all_time=True ‚Äî —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ")
        # –ë–µ—Ä–µ–º –∏–∑ summary –¥–∞–Ω–Ω—ã–µ
        period_map = {
            bid: {
                "spent": d.get("spent_all_time", 0.0),
                "cpc": d.get("cpc_all_time", 0.0),
                "vk.cpa": d.get("vk.cpa_all_time", 0.0),
            }
            for bid, d in sum_map.items()
        }
        date_from, date_to = None, None
    else:
        date_from, date_to = daterange_for_last_n_days(acc.n_days)
        period_map = api.stats_period_banners(banner_ids, date_from, date_to)


    # 4) –ü—Ä–æ–π—Ç–∏—Å—å –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–∫—É
    for b in banners:
        bid = int(b["id"])
        agid = int(b.get("ad_group_id", 0) or 0)
        # --- –§–∏–ª—å—Ç—Ä: —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –±–∞–Ω–Ω–µ—Ä—ã ---
        if acc.allowed_banners:
            if bid not in acc.allowed_banners:
                logger.info(f"‚ñ∂ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–∞–Ω–Ω–µ—Ä {bid}: –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ allowed_banners")
                continue

        # --- –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω ---
        if acc.banner_date_create:
            try:
                dt_cutoff = dt.datetime.strptime(acc.banner_date_create, "%d.%m.%Y")
                created_at = api.get_banner_created(bid)
                if not created_at:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–Ω–Ω–µ—Ä–∞ {bid} ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π")
                    continue
                if created_at.date() < dt_cutoff.date():
                    logger.info(f"‚ñ∂ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–∞–Ω–Ω–µ—Ä {bid}: —Å–æ–∑–¥–∞–Ω {created_at.date()}, –¥–æ {dt_cutoff.date()}")
                    continue
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–Ω–Ω–µ—Ä–∞ {bid}: {e}")
                continue


        spent_all_time = sum_map.get(bid, {}).get("spent_all_time", 0.0)
        period = period_map.get(bid, {})
        spent = float(period.get("spent", 0.0))
        cpc = float(period.get("cpc", 0.0))
        vk_cpa = float(period.get("vk.cpa", 0.0))

        # --- –ò—Å–∫–ª—é—á–µ–Ω–∏—è ---
        if bid in acc.exceptions_banners:
            logger.info(f"‚ñ∂ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–∞–Ω–Ω–µ—Ä {bid}: –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï")
            continue
        if agid in acc.exceptions_campaigns:
            logger.info(f"‚ñ∂ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–∞–Ω–Ω–µ—Ä {bid} (–ö–∞–º–ø–∞–Ω–∏—è {agid}): –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï")
            continue
            
        logger.info(
                f"[BANNER {bid} | GROUP {agid}]:spent = {spent:.2f},cpc = {cpc:.2f},cpa = {vk_cpa:.2f}"
        )

        # –ï—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ –ø–æ—Ç—Ä–∞—Ç–∏–ª–æ –±–æ–ª—å—à–µ –ø–æ—Ä–æ–≥–∞ ‚Äî –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
        if spent_all_time > SPENT_ALL_TIME_DONT_TOUCH_RUB:
            logger.info(
                f"‚ñ∂ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º: spent_all_time>{SPENT_ALL_TIME_DONT_TOUCH_RUB} (–Ω–µ —Ç—Ä–æ–≥–∞–µ–º –ø–æ –ø—Ä–∞–≤–∏–ª—É)"
            )
            continue

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞
        bad, reason = acc.flt.violates(spent=spent, cpc=cpc, vk_cpa=vk_cpa)
        if not bad:
            logger.info("‚úî –ü—Ä–æ—à—ë–ª —Ñ–∏–ª—å—Ç—Ä ‚Äî –û–ö")
            continue
            
        if disabled_count >= MAX_DISABLES_PER_RUN:
            logger.warning("üö® –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∏–π –∑–∞ –∑–∞–ø—É—Å–∫ ‚Äî –¥–∞–ª—å–Ω–µ–π—à–∏–µ –±–∞–Ω–Ω–µ—Ä—ã –Ω–µ –±—É–¥—É—Ç –æ—Ç–∫–ª—é—á–∞—Ç—å—Å—è")
            break

        # –û—Ç–∫–ª—é—á–∞–µ–º –æ–±—ä—è–≤—É
        logger.warning(f"‚úñ –ù–ï –ü–†–û–®–Å–õ –§–ò–õ–¨–¢–†: {reason}")
        disabled = api.disable_banner(bid)
        status_msg = "–û–¢–ö–õ–Æ–ß–ï–ù–û" if disabled else "–ù–ï –£–î–ê–õ–û–°–¨ –û–¢–ö–õ–Æ–ß–ò–¢–¨"
        logger.warning(f"‚áí {status_msg}")

        if disabled:
            disabled_count += 1
            disabled_ids.append(bid)
          
            # --- –ö–æ–ø–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ---
            reason_short = short_reason(spent, cpc, vk_cpa, acc.flt)
            banner_name = api.get_banner_name(bid) or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            notifications.append(
                f"<b>{banner_name}</b> #{bid}\n"
                f"    ‚§∑ {reason_short}\n"
                f"    ‚§∑ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ = {spent:.2f} ‚ÇΩ\n"
                f"    ‚§∑ –¶–µ–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ = {vk_cpa:.2f} ‚ÇΩ | –¶–µ–Ω–∞ –∫–ª–∏–∫–∞ = {cpc:.2f} ‚ÇΩ"
            )
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ TG
        #reason_short = short_reason(spent, cpc, vk_cpa, acc.flt)
        #date_from_fmt, date_to_fmt = fmt_date(date_from), fmt_date(date_to)
        #banner_name = api.get_banner_name(bid) or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        #text = (
        #    f"<b>[{acc.name}]</b>\n"
        #    f"<b>–ë–∞–Ω–Ω–µ—Ä \"{banner_name}\" #{bid}</b> ‚Äî {status_msg}\n"
        #    f"–ü—Ä–∏—á–∏–Ω–∞: {reason_short}\n\n"
        #    f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        #    f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è = {spent_all_time:.2f} RUB\n"
        #    f"–ó–∞ –ø–µ—Ä–∏–æ–¥ —Å {date_from_fmt} –ø–æ {date_to_fmt}:\n"
        #    f"    - –ü–æ—Ç—Ä–∞—á–µ–Ω–æ = {spent:.2f}\n"
        #    f"    - –¶–µ–Ω–∞ –∫–ª–∏–∫–∞ = {cpc:.2f}\n"
        #    f"    - –¶–µ–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ = {vk_cpa:.2f}"
        #)
        #tg_notify(bot_token=tg_token, chat_id=acc.chat_id, text=text)
  
    # --- –û—Ç–ø—Ä–∞–≤–∫–∞ ---
    if notifications:
        combined_text = f"<b>[{acc.name}]</b>\n<b>–û—Ç–∫–ª—é—á–µ–Ω—ã –±–∞–Ω–Ω–µ—Ä—ã:</b>\n\n" + "\n\n".join(notifications)
        tg_notify(bot_token=tg_token, chat_id=acc.chat_id, text=combined_text)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ TG —Å {len(notifications)} –±–∞–Ω–Ω–µ—Ä–∞–º–∏")
          
    if disabled_ids:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: logs/disabled_MAIN_2025-10-29.json
        backup_path = LOG_DIR / f"disabled_{acc.name}_{dt.date.today()}.json"
        try:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–¥–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ä—ã–µ ID –∏ –¥–æ–ø–∏—Å—ã–≤–∞–µ–º
            if backup_path.exists():
                with open(backup_path, "r", encoding="utf-8") as f:
                    old_data = json.load(f)
                    if isinstance(old_data, list):
                        disabled_ids = list(set(old_data + disabled_ids))
            with open(backup_path, "w", encoding="utf-8") as f:
                json.dump(disabled_ids, f, ensure_ascii=False, indent=2)
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã ID –æ—Ç–∫–ª—é—á—ë–Ω–Ω—ã—Ö –±–∞–Ω–Ω–µ—Ä–æ–≤: {backup_path} (–≤—Å–µ–≥–æ {len(disabled_ids)})")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á—ë–Ω–Ω—ã—Ö –±–∞–Ω–Ω–µ—Ä–æ–≤: {e}")



# ==========================
# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
# ==========================

def main():
    load_env()

    tg_token = os.environ.get("TG_BOT_TOKEN")
    if not tg_token:
        raise RuntimeError("–í .env –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å TG_BOT_TOKEN")

    logger.info("–°—Ç–∞—Ä—Ç VK ADS –∞–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∏/–æ—Ç–∫–ª—é—á–∞–ª–∫–∏")

    for acc in ACCOUNTS:
        try:
            process_account(acc, tg_token)
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–±–∏–Ω–µ—Ç–∞ {acc.name}: {e}")

    logger.info("–ì–æ—Ç–æ–≤–æ")


if __name__ == "__main__":
    main()
