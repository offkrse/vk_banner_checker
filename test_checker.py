import requests
import logging
from datetime import datetime, timedelta
from dotenv import load_dotenv
import os
import time

# ======== –ó–ê–ì–†–£–ó–ö–ê –û–ö–†–£–ñ–ï–ù–ò–Ø ========
load_dotenv()

# ======== –ù–ê–°–¢–†–û–ô–ö–ò ========
SPENT_LIMIT = 300       # –ª–∏–º–∏—Ç –ø–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–º —Å—Ä–µ–¥—Å—Ç–≤–∞–º
CPA_LIMIT = 200         # –ª–∏–º–∏—Ç –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
VK_HOST = "https://ads.vk.com"
LOG_FILE = "vk_ads.log"
BATCH_SIZE = 50         # —Å–∫–æ–ª—å–∫–æ –±–∞–Ω–Ω–µ—Ä–æ–≤ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑
# ============================

logging.basicConfig(
    filename=LOG_FILE,
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
)

# –ê–∫–∫–∞—É–Ω—Ç—ã VK ADS
ACCOUNTS = [
    {
        "name": "User1",
        "token": os.getenv("VK_TOKEN_USER1"),
        "telegram_chat": os.getenv("TELEGRAM_CHAT_USER1"),
    }
]

TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")


# ======== –£–¢–ò–õ–ò–¢–´ ========

def send_telegram_message(chat_id: str, text: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        requests.post(url, data={"chat_id": chat_id, "text": text})
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")


def get_vk(url, token, params=None, retries=5):
    """GET-–∑–∞–ø—Ä–æ—Å –∫ VK ADS API"""
    headers = {"Authorization": f"Bearer {token}"}

    for attempt in range(retries):
        r = requests.get(f"{VK_HOST}{url}", headers=headers, params=params)
        if r.status_code == 429:
            logging.warning("‚è≥ –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ VK Ads –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –û–∂–∏–¥–∞–Ω–∏–µ 2 —Å–µ–∫—É–Ω–¥—ã...")
            time.sleep(2)
            continue

        if r.status_code != 200:
            raise Exception(f"–û—à–∏–±–∫–∞ VK GET {url}: {r.status_code} {r.text}")

        time.sleep(0.3)
        return r.json()

    raise Exception(f"–û—à–∏–±–∫–∞ VK GET {url}: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ—Å–ª–µ 429")


def post_vk(url, token, data=None):
    """POST-–∑–∞–ø—Ä–æ—Å –∫ VK ADS API (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –±–∞–Ω–Ω–µ—Ä–∞)"""
    headers = {"Authorization": f"Bearer {token}", "Content-Type": "application/json"}
    r = requests.post(f"{VK_HOST}{url}", headers=headers, json=data)

    if r.status_code not in (200, 204):
        raise Exception(f"–û—à–∏–±–∫–∞ VK POST {url}: {r.status_code} {r.text}")

    time.sleep(0.2)
    return r.json() if r.text else {}


# ======== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ========

def fetch_banner_stats(token, banner_ids, date_from, date_to):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –±–∞–Ω–Ω–µ—Ä–∞–º –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω"""
    ids_str = ",".join(map(str, banner_ids))
    url = "/api/v2/statistics/banners/day.json"
    params = {
        "ids": ids_str,                 # ‚úÖ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
        "metrics": "base",
        "attribution": "conversion",
        "date_from": date_from,
        "date_to": date_to,
    }

    response = get_vk(url, token, params=params)
    items = response.get("items", [])
    stats = {}

    for item in items:
        banner_id = item.get("id")

        total_spent = 0.0
        total_goals = 0.0

        for row in item.get("rows", []):
            base = row.get("base", {})
            spent = float(base.get("spent", 0) or 0)
            goals = float(base.get("vk", {}).get("goals", 0) or 0)
            total_spent += spent
            total_goals += goals

        # –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π CPA –∑–∞ –ø–µ—Ä–∏–æ–¥
        total_cpa = round(total_spent / total_goals, 2) if total_goals > 0 else 0.0
        stats[banner_id] = {"spent": total_spent, "cpa": total_cpa}

    return stats


# ======== –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê ========

def check_ads(account):
    token = account["token"]
    chat_id = account["telegram_chat"]
    user_name = account["name"]

    logging.info(f"===== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞: {user_name} =====")

    processed_banners = set()  # ‚úÖ –∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–µ–π

    try:
        # 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏
        ad_plans = get_vk("/api/v2/ad_plans.json", token, params={"_status": "active"}).get("items", [])
        logging.info(f"–ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π: {len(ad_plans)}")

        for plan in ad_plans:
            plan_id = plan["id"]
            plan_name = plan["name"]

            # 2Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã –∫–∞–º–ø–∞–Ω–∏–∏
            ad_groups = get_vk("/api/v2/ad_groups.json", token, params={
                "ad_plan_id": plan_id,
                "_status": "active"
            }).get("items", [])
            logging.info(f"‚ñ∂ –ö–∞–º–ø–∞–Ω–∏—è: {plan_name} ‚Äî –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø: {len(ad_groups)}")

            for group in ad_groups:
                group_id = group["id"]
                group_name = group.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")

                # 3Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∞–Ω–Ω–µ—Ä—ã (—Å—Ç—Ä–æ–≥–∏–π —Ñ–∏–ª—å—Ç—Ä)
                banners = get_vk("/api/v2/banners.json", token, params={
                    "ad_plan_id": plan_id,
                    "ad_group_id": group_id,
                    "_status": "active"
                }).get("items", [])
                logging.info(f"  ‚îú‚îÄ –ì—Ä—É–ø–ø–∞ {group_name}: –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–Ω–Ω–µ—Ä–æ–≤: {len(banners)}")

                if not banners:
                    continue

                # –î–∞—Ç—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–≤—á–µ—Ä–∞ –∏ —Å–µ–≥–æ–¥–Ω—è)
                date_from = (datetime.today() - timedelta(days=1)).strftime("%Y-%m-%d")
                date_to = datetime.today().strftime("%Y-%m-%d")

                # 4Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–∞—Ä—Ç–∏—è–º (–ø–æ 50 –±–∞–Ω–Ω–µ—Ä–æ–≤)
                banner_ids = [b["id"] for b in banners]
                for i in range(0, len(banner_ids), BATCH_SIZE):
                    batch = banner_ids[i:i + BATCH_SIZE]
                    stats = fetch_banner_stats(token, batch, date_from, date_to)

                    for banner in banners:
                        banner_id = banner["id"]

                        # —Ñ–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∫–∞–º–ø–∞–Ω–∏–∏
                        if banner.get("ad_plan_id") != plan_id:
                            continue

                        if banner_id not in stats or banner_id in processed_banners:
                            continue

                        processed_banners.add(banner_id)
                        banner_name = banner.get("name", f"Banner {banner_id}")
                        spent = stats[banner_id]["spent"]
                        cpa = stats[banner_id]["cpa"]

                        logging.info(f"  ‚îÇ  ‚îî‚îÄ {banner_name}: spent={spent}, cpa={cpa}")

                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ (–ò)
                        if spent >= SPENT_LIMIT and cpa >= CPA_LIMIT:
                            try:
                                post_vk(f"/api/v2/banners/{banner_id}.json", token, data={"status": "blocked"})
                                msg = f"üö´ [{plan_name}] ‚Üí [{group_name}] ‚Üí [{banner_name}] –æ—Ç–∫–ª—é—á–µ–Ω (spent={spent}, cpa={cpa})"
                                send_telegram_message(chat_id, msg)
                                logging.warning(msg)
                            except Exception as e:
                                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –±–∞–Ω–Ω–µ—Ä–∞ {banner_id}: {e}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {user_name}: {e}")


# ======== –¢–û–ß–ö–ê –í–•–û–î–ê ========
if __name__ == "__main__":
    logging.info(f"\n\n===== –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ {datetime.now()} =====")
    for acc in ACCOUNTS:
        check_ads(acc)
    logging.info("===== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ =====\n")
